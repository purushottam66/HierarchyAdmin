<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Maping_model extends CI_Model
{

    public function __construct()
    {
        parent::__construct();
        $this->load->database();
    }


    public function get_all_Maping()
    {
        $query = $this->db->get('employee');
        return $query->result_array();
    }


    public function get_all_Maping____()
    {
        $query = $this->db->get('maping');
        return $query->result_array();
    }

    public function get_all_Maping_table($Pjp_Code)
    {

        $this->db->group_start();
        for ($i = 1; $i <= 7; $i++) {
            $this->db->or_where("Level_$i", $Pjp_Code);
        }
        $this->db->group_end();

        $this->db->distinct();
        $query = $this->db->get('maping');
        $result = $query->result_array();
        $tree = [];
        foreach ($result as $row) {
            $current_level = &$tree;
            for ($i = 1; $i <= 7; $i++) {
                $level_value = $row["Level_$i"];
                $employee_name = $this->get_employee_name($level_value);

                if (!empty($level_value)) {
                    if (!isset($current_level[$level_value])) {
                        $current_level[$level_value] = [
                            'name' => $employee_name,
                            'children' => []
                        ];
                    }

                    $current_level = &$current_level[$level_value]['children'];
                }
            }
            unset($current_level);
            $current_level = &$tree;
        }

        return $tree;
    }


    public function get_all_Maping_table_zone()
    {
        //log_message('info', 'get_all_Maping_table_zone function called.');

        // Step 1: Fetch zone permissions
        $zone_query = $this->db->get('zone_permissions');
        $zone_permissions_result = $zone_query->result_array();
        //log_message('info', 'Zone Permissions Result: ' . json_encode($zone_permissions_result, JSON_PRETTY_PRINT));

        // Decode zone_id from JSON
        $zone_ids = [];
        foreach ($zone_permissions_result as $permission) {
            $decoded_ids = json_decode($permission['zone_id'], true);
            if (is_array($decoded_ids)) {
                $zone_ids = array_merge($zone_ids, $decoded_ids);
            }
        }

        //log_message('info', 'Extracted Zone IDs: ' . json_encode($zone_ids, JSON_PRETTY_PRINT));

        // Check if zone_ids is empty
        if (empty($zone_ids)) {
            //log_message('info', 'No valid zone IDs found for join.');
            return [];
        }

        // Step 2: Join zone_permissions and distributors
        $this->db->select('d.Customer_Code, z.zone_id, d.Zone_Code');
        $this->db->from('zone_permissions z');
        $this->db->join('distributors d', 'd.Zone_Code IN (' . implode(',', array_map([$this->db, 'escape'], $zone_ids)) . ')', 'inner');

        // Execute the query
        $query = $this->db->get();
        $distributors_result = $query->result_array();

        //log_message('info', 'Distributors Result: ' . json_encode($distributors_result, JSON_PRETTY_PRINT));

        // Extract only Customer_Code
        $customer_codes = array_column($distributors_result, 'Customer_Code');
        //log_message('info', 'Extracted Customer Codes: ' . json_encode($customer_codes, JSON_PRETTY_PRINT));

        // Step 3: Match Customer_Code with DB_Code in maping table
        $mapping_result = [];
        if (!empty($customer_codes)) {
            // Chunk customer_codes to avoid exceeding regex limits
            $chunks = array_chunk($customer_codes, 1000); // Adjust chunk size if necessary
            foreach ($chunks as $chunk) {
                $this->db->where_in('DB_Code', $chunk);
                $mapping_query = $this->db->get('maping');
                $mapping_result = array_merge($mapping_result, $mapping_query->result_array());
            }

            //log_message('info', 'Mapping Result: ' . json_encode($mapping_result, JSON_PRETTY_PRINT));

            // Step 4: Build the tree structure based on levels
            $tree = [];
            foreach ($mapping_result as $row) {
                $current_level = &$tree;

                for ($i = 1; $i <= 7; $i++) {
                    // Get the level value or set it to "NULL" if it's empty
                    $level_value = !empty($row["Level_$i"]) ? $row["Level_$i"] : "NULL";

                    // Safely get the employee name, handling "NULL" value appropriately
                    $employee_name = ($level_value === "NULL") ? "NULL" : $this->get_employee_name($level_value);

                    // Build the tree for each level
                    if (!isset($current_level[$level_value])) {
                        $current_level[$level_value] = [
                            'name' => $employee_name,
                            'children' => [],
                            'level' => $i // Adding the current level
                        ];
                    }

                    // Navigate to the children for the next level
                    $current_level = &$current_level[$level_value]['children'];
                }

                // Reset current level for next iteration
                unset($current_level);
            }

            // Log the generated tree structure for debugging
            //log_message('info', 'Generated Tree Structure: ' . json_encode($tree, JSON_PRETTY_PRINT));

            return $tree;
        }

        return [];
    }





    private function get_employee_name($pjp_code)
    {

        $this->db->where('pjp_code', $pjp_code);
        $query = $this->db->get('employee');
        $result = $query->row_array();
        return isset($result['name']) ? $result['name'] : '';
    }

    public function get_all_Maping_table_ajex($id, $level)
    {
        $level_field = 'Level_' . $level;
        $this->db->where($level_field, $id);
        $this->db->distinct();
        $this->db->select('DB_Code, Level_1, Level_2, Level_3, Level_4, Level_5, Level_6, Level_7');
        $query = $this->db->get('maping');
        $result = $query->result_array();
        return $result;
    }

    public function get_zone_permissions_by_user($user_id)
    {
        // Get zone permissions for the user
        $this->db->select('zone_id');
        $this->db->from('zone_permissions');
        $this->db->where('user_id', $user_id);

        $query = $this->db->get();
        return $query->result_array();  // Return the list of zone permissions
    }

    // public function ajax_endpoint()
    // {
    //     $user_id = $this->session->userdata('back_user_id');
    //     if (!$user_id) {
    //         redirect('admin/login');
    //     }

    //     $postData = json_decode(file_get_contents('php://input'), true);

    //     $level = $postData['level'] ?? null;
    //     $id = $postData['id'] ?? null;

    //     $levels = [];
    //     for ($i = 1; $i <= 7; $i++) {
    //         $levelKey = "Level_" . $i;
    //         $levels[$levelKey] = $postData[$levelKey] ?? null;
    //     }

    //     $result = $this->Maping_model->get_all_Maping_table_ajex_zone($level, $id, $levels);

    //     header('Content-Type: application/json');
    //     echo json_encode($result);
    // }

    public function get_all_Maping_table_ajex_zone($level = null, $id = null, $levels = [])
    {
        // Step 1: Fetch zone permissions
        $zone_query = $this->db->get('zone_permissions');
        $zone_permissions_result = $zone_query->result_array();

        // Decode zone_id from JSON
        $zone_ids = [];
        foreach ($zone_permissions_result as $permission) {
            $decoded_ids = json_decode($permission['zone_id'], true);
            if (is_array($decoded_ids) && !empty($decoded_ids)) {
                $zone_ids = array_merge($zone_ids, $decoded_ids);
            }
        }

        // Check if zone_ids is empty
        if (empty($zone_ids)) {
            return [];
        }

        // Step 2: Chunk the zone_ids for the `IN` query to prevent overloading the regex engine
        $chunked_zone_ids = array_chunk($zone_ids, 1000); // Chunk by 1000 (you can adjust the size)

        // Step 3: Join zone_permissions and distributors
        $this->db->select('d.Customer_Code, z.zone_id, d.Zone_Code');
        $this->db->from('zone_permissions z');
        $this->db->join('distributors d', 'd.Zone_Code IN (' . implode(',', array_map([$this->db, 'escape'], $chunked_zone_ids[0])) . ')', 'inner'); // Start with first chunk

        // Execute the query
        $query = $this->db->get();
        $distributors_result = $query->result_array();

        // Extract only Customer_Code
        $customer_codes = array_column($distributors_result, 'Customer_Code');

        // Step 4: If no customer codes, return empty
        if (empty($customer_codes)) {
            return [];
        }

        // Step 5: Now handle the mapping query by chunking the customer_codes
        $chunked_customer_codes = array_chunk($customer_codes, 1000); // Chunk the customer codes

        // Start measuring the query execution time
        $start_time = microtime(true);

        $final_result = [];
        foreach ($chunked_customer_codes as $chunk) {
            // Apply filtering based on customer codes
            $this->db->distinct();
            $this->db->select('DB_Code, Level_1, Level_2, Level_3, Level_4, Level_5, Level_6, Level_7');
            $this->db->where_in('DB_Code', $chunk);

            // Apply filtering based on level and id if provided
            if (!is_null($level) && !is_null($id)) {
                $level_field = 'Level_' . $level;
                $this->db->where($level_field, $id);
            }

            // Apply filtering for each level dynamically based on the provided levels
            for ($i = 1; $i <= 7; $i++) {
                $levelKey = 'Level_' . $i;
                if (isset($levels[$levelKey])) {
                    if ($i < $level) {
                        $this->db->where($levelKey, $levels[$levelKey]);
                    } elseif ($i == $level) {
                        continue;
                    } else {
                        break;
                    }
                }
            }

            // Execute the query for this chunk
            $query = $this->db->get('maping');
            $result = $query->result_array();

            // Merge the result
            $final_result = array_merge($final_result, $result);
        }

        // End measuring the query execution time
        $end_time = microtime(true);

        return $final_result;
    }







    public function get_mapping_by_customer_codes($customerCodes)
    {
        $this->db->where_in('DB_Code', $customerCodes);
        $query = $this->db->get('maping');
        return $query->result_array();
    }

    public function editmaping($id)
    {
        $this->db->where('id', $id);
        return $this->db->get('maping')->row_array();
    }

    public function update_mapping($id, $data)
    {
        $this->db->where('id', $id);
        return $this->db->update('maping', $data);
    }





    public function hierarchydelete($id)
    {
        $this->db->where('id', $id);
        return $this->db->delete('maping');
    }


    public function get_all_Maping_data($search = '', $filters = '')
    {
        // Start building the query
        // $this->db->select('*');
        $this->db->from('distributors'); // Ensure this is the correct table name

        // Apply search filter if provided
        if (!empty($search)) {
            $this->db->group_start(); // Group the LIKE conditions together
            $this->db->like('Sales_Code', $search);
            $this->db->or_like('Customer_Code', $search);

            $this->db->group_end(); // Close the group
        }

        // Apply other filters if provided
        if (is_array($filters) && !empty($filters)) {
            foreach ($filters as $key => $values) {
                if (!empty($values)) {
                    log_message('debug', "Applying filter for key: $key with values: " . implode(', ', $values));
                    $this->db->where_in($key, $values); // Apply the filter using where_in
                }
            }
        }



        // Execute the query and return the results as an array
        $query = $this->db->get();

        // Check for errors
        if ($query === FALSE) {
            log_message('error', 'Database query failed: ' . $this->db->_error_message());
            return false;  // Return false in case of failure
        }

        // Return results as an array
        return $query->result_array();
    }




    public function get_maping_d_count($search = '', $filters = '')
    {
        $this->db->select('COUNT(*) as total_count');
        $this->db->from('maping mp');
        $this->db->join('distributors ds', 'mp.DB_Code = ds.Customer_Code AND mp.Sales_Code = ds.Sales_Code 
            AND mp.Distribution_Channel_Code = ds.Distribution_Channel_Code AND mp.Division_Code = ds.Division_Code 
            AND mp.Customer_Type_Code = ds.Customer_Type_Code AND mp.Customer_Group_Code = ds.Customer_Group_Code', 'inner');

        // Apply filters (same as in the data query)
        if (is_array($filters) && !empty($filters)) {
            foreach ($filters as $key => $values) {
                if (!empty($values)) {
                    $this->db->where_in("ds.$key", $values);
                }
            }
        }

        // Apply search condition (similar to the data query)
        if (!empty($search)) {
            $escaped_search = $this->db->escape_like_str($search);
            $this->db->group_start();
            $this->db->like('ds.Customer_Name', $escaped_search);
            $this->db->or_like('ds.City', $escaped_search);
            $this->db->or_like('ds.Sales_Code', $escaped_search);
            $this->db->or_like('ds.Customer_Code', $escaped_search);
            $this->db->group_end();
        }

        // Execute the query and return the count
        $query = $this->db->get();
        $result = $query->row_array();
        return $result['total_count'];
    }



    public function get_maping_d($start, $length, $search = '', $filters = '')
    {
        // Start building the query
        $this->db->select('
            mp.id,
            mp.DB_Code,
            mp.Level_1,
            emp1.name AS Level_1_Name,
            emp1.employer_code AS Level_1_Employer_Code,
            emp1.designation_name AS Level_1_Designation_Name,
            emp1.id AS Emp_id1,

            mp.Level_2,
             emp2.name AS Level_2_Name,
              emp2.employer_code AS Level_2_Employer_Code,
            emp2.designation_name AS Level_2_Designation_Name,
 emp2.id AS Emp_id2,

             mp.Level_3, emp3.name AS Level_3_Name,
            emp3.employer_code AS Level_3_Employer_Code,
             emp3.designation_name AS Level_3_Designation_Name,
              emp3.id AS Emp_id3,


            mp.Level_4,
             emp4.name AS Level_4_Name,
              emp4.employer_code AS Level_4_Employer_Code,
            emp4.designation_name AS Level_4_Designation_Name,
             emp4.id AS Emp_id4,


             mp.Level_5, emp5.name AS Level_5_Name,
            emp5.employer_code AS Level_5_Employer_Code,
             emp5.designation_name AS Level_5_Designation_Name,
              emp5.id AS Emp_id5,


            mp.Level_6, emp6.name AS Level_6_Name,
             emp6.employer_code AS Level_6_Employer_Code,
            emp6.designation_name AS Level_6_Designation_Name,
             emp6.id AS Emp_id6,


             mp.Level_7, emp7.name AS Level_7_Name,
            emp7.employer_code AS Level_7_Employer_Code,
             emp7.designation_name AS Level_7_Designation_Name,
              emp7.id AS Emp_id7,


            ds.Customer_Name,
             ds.Customer_Code,
              ds.Sales_Code,
               ds.Distribution_Channel_Code,
            ds.Division_Code,
             ds.Customer_Type_Code,
              ds.Customer_Group_Code,
               ds.Pin_Code, ds.City,
                ds.District,
            ds.Contact_Number,
             ds.Country,
              ds.Zone,
               ds.State,
                ds.Population_Strata_1,
                 ds.Population_Strata_2,
            ds.Country_Group, ds.GTM_TYPE,
             ds.SUPERSTOCKIST,
              ds.STATUS, ds.Customer_Type_Name,
            ds.Customer_Creation_Date, ds.Sector_Code, ds.State_Code, ds.Zone_Code, ds.Distribution_Channel_Name,
            ds.Customer_Group_Name, ds.Sales_Name, ds.Division_Name, ds.Sector_Name
        ');
        $this->db->from('maping mp');
        $this->db->join('distributors ds', 'mp.DB_Code = ds.Customer_Code AND mp.Sales_Code = ds.Sales_Code 
            AND mp.Distribution_Channel_Code = ds.Distribution_Channel_Code AND mp.Division_Code = ds.Division_Code 
            AND mp.Customer_Type_Code = ds.Customer_Type_Code AND mp.Customer_Group_Code = ds.Customer_Group_Code', 'inner');
        $this->db->join('employee emp1', 'emp1.pjp_code = mp.Level_1', 'left');
        $this->db->join('employee emp2', 'emp2.pjp_code = mp.Level_2', 'left');
        $this->db->join('employee emp3', 'emp3.pjp_code = mp.Level_3', 'left');
        $this->db->join('employee emp4', 'emp4.pjp_code = mp.Level_4', 'left');
        $this->db->join('employee emp5', 'emp5.pjp_code = mp.Level_5', 'left');
        $this->db->join('employee emp6', 'emp6.pjp_code = mp.Level_6', 'left');
        $this->db->join('employee emp7', 'emp7.pjp_code = mp.Level_7', 'left');

        // Apply filters
        if (is_array($filters) && !empty($filters)) {
            foreach ($filters as $key => $values) {
                if (!empty($values)) {
                    $this->db->where_in("ds.$key", $values);
                }
            }
        }

        // Apply search condition if provided
        if (!empty($search)) {
            $escaped_search = $this->db->escape_like_str($search);
            $this->db->group_start();
            $this->db->like('ds.Customer_Name', $escaped_search);
            $this->db->or_like('ds.Sales_Code', $escaped_search);
            $this->db->or_like('ds.Customer_Code', $escaped_search);
            $this->db->group_end();
        }

        // Pagination
        $this->db->limit($length, $start);

        // Execute the query and return data
        $query = $this->db->get();
        return $query->result_array();
    }



    public function get_all_Maping_data_filter($salesCode = null, $customerTypeCode = null, $customerGroupCode = null, $divisionCode = null, $distributionChannelCode = null)
    {
        $conditions = [];

        // Add conditions only if filters are provided
        if (!empty($salesCode)) {
            $conditions[] = "mp.Sales_Code = '" . $this->db->escape_str($salesCode) . "'";
        }
        if (!empty($customerTypeCode)) {
            $conditions[] = "mp.Customer_Type_Code = '" . $this->db->escape_str($customerTypeCode) . "'";
        }
        if (!empty($customerGroupCode)) {
            $conditions[] = "mp.Customer_Group_Code = '" . $this->db->escape_str($customerGroupCode) . "'";
        }
        if (!empty($divisionCode)) {
            $conditions[] = "mp.Division_Code = '" . $this->db->escape_str($divisionCode) . "'";
        }
        if (!empty($distributionChannelCode)) {
            $conditions[] = "mp.Distribution_Channel_Code = '" . $this->db->escape_str($distributionChannelCode) . "'";
        }

        // Construct the WHERE clause if conditions exist
        $whereClause = '';
        if (!empty($conditions)) {
            $whereClause = 'WHERE ' . implode(' AND ', $conditions);
        }

        $sql = "
        SELECT DISTINCT
            mp.id,
            mp.DB_Code,
            mp.Level_1,
            emp1.name AS Level_1_Name,
            mp.Level_2,
            emp2.name AS Level_2_Name,
            mp.Level_3,
            emp3.name AS Level_3_Name,
            mp.Level_4,
            emp4.name AS Level_4_Name,
            mp.Level_5,
            emp5.name AS Level_5_Name,
            mp.Level_6,
            emp6.name AS Level_6_Name,
            mp.Level_7,
            emp7.name AS Level_7_Name,
            ds.Customer_Name,
            ds.Customer_Code,
            ds.Sales_Code,
            ds.Distribution_Channel_Code,
            ds.Division_Code,
            ds.Customer_Type_Code,
            ds.Customer_Group_Code,
            ds.Pin_Code,
            ds.City,
            ds.District,
            ds.Contact_Number,
            ds.Country,
            ds.Zone,
            ds.Zone_Code,
            ds.State
        FROM 
            maping mp
        LEFT JOIN employee emp1 ON mp.Level_1 = emp1.pjp_code
        LEFT JOIN employee emp2 ON mp.Level_2 = emp2.pjp_code
        LEFT JOIN employee emp3 ON mp.Level_3 = emp3.pjp_code
        LEFT JOIN employee emp4 ON mp.Level_4 = emp4.pjp_code
        LEFT JOIN employee emp5 ON mp.Level_5 = emp5.pjp_code
        LEFT JOIN employee emp6 ON mp.Level_6 = emp6.pjp_code
        LEFT JOIN employee emp7 ON mp.Level_7 = emp7.pjp_code
        LEFT JOIN distributors ds ON mp.DB_Code = ds.Customer_Code
            AND IFNULL(mp.Sales_Code, '') = IFNULL(ds.Sales_Code, '')
            AND IFNULL(mp.Distribution_Channel_Code, '') = IFNULL(ds.Distribution_Channel_Code, '')
            AND IFNULL(mp.Division_Code, '') = IFNULL(ds.Division_Code, '')
            AND IFNULL(mp.Customer_Type_Code, '') = IFNULL(ds.Customer_Type_Code, '')
            AND IFNULL(mp.Customer_Group_Code, '') = IFNULL(ds.Customer_Group_Code, '')
        $whereClause
        GROUP BY 
            mp.DB_Code, 
            mp.Level_1, 
            mp.Level_2, 
            mp.Level_3, 
            mp.Level_4, 
            mp.Level_5, 
            mp.Level_6, 
            mp.Level_7,
            ds.Customer_Name,
            ds.Customer_Code,
            ds.Sales_Code,
            ds.Distribution_Channel_Code,
            ds.Division_Code,
            ds.Customer_Type_Code,
            ds.Customer_Group_Code,
            ds.Pin_Code,
            ds.City,
            ds.District,
            ds.Contact_Number,
            ds.Country,
            ds.Zone,
            ds.Zone_Code,
            ds.State;
    ";

        // Execute the query and return the result
        $query = $this->db->query($sql);
        return $query->result_array(); // Returns data as an array of results
    }


    // In Maping_model.php
    // In Maping_model.php
    public function get_db_code_by_pjp_and_level($pjp_code, $level)
    {
        // Ensure that the level is valid before building the query
        if ($level < 1 || $level > 7) {  // Update this if you have more levels
            return [];
        }

        // Build the query to find the DB_Code based on pjp_code and the specified level
        $this->db->select('DB_Code');
        $this->db->from('maping');
        $this->db->where('Level_' . $level, $pjp_code);  // Dynamically match the Level_X column

        // Execute the query and retrieve all matching results
        $query = $this->db->get();
        $db_codes = $query->result_array();  // Get the DB_Code results

        // Extract only the DB_Code values from the result
        $db_code_values = array_column($db_codes, 'DB_Code');

        // If there are no DB_Code values, return empty array
        if (empty($db_code_values)) {
            return [];
        }

        // Now fetch the corresponding distributors with complex condition matching
        $this->db->select('d.*'); // Select columns from distributors table
        $this->db->from('distributors d');
        $this->db->join(
            'maping m',
            'd.Customer_Code = m.DB_Code 
                AND d.Sales_Code = m.Sales_Code
                AND d.Distribution_Channel_Code = m.Distribution_Channel_Code
                AND d.Division_Code = m.Division_Code
                AND d.Customer_Type_Code = m.Customer_Type_Code
                AND d.Customer_Group_Code = m.Customer_Group_Code',
            'inner'
        );
        $this->db->where_in('m.DB_Code', $db_code_values); // Match with retrieved DB_Code values

        $distributor_query = $this->db->get();
        $distributors = $distributor_query->result_array(); // Get all matching distributor records

        // Return the distributor data
        return $distributors;
    }







    public function get_zone_permissions_by_empid($empid)
    {
        // चरण 1: ज़ोन परमिशन डेटा प्राप्त करें
        $this->db->select('z.zone_id, z.other_columns'); // अन्य आवश्यक कॉलम जोड़ें
        $this->db->from('zone_permissions z');
        $this->db->where('z.user_id', $empid); // हार्डकोडेड empid (user_id) के आधार पर फ़िल्टर करें
        $query = $this->db->get();

        // डिबगिंग: अंतिम SQL क्वेरी को लॉग करें
        //log_message('info', $this->db->last_query());

        $zone_permissions = $query->result_array();

        // यदि कोई ज़ोन परमिशन डेटा नहीं मिला
        if (empty($zone_permissions)) {
            //log_message('error', 'कोई ज़ोन परमिशन डेटा नहीं मिला।');
            return []; // या आप यहां एक विशेष संदेश वापस कर सकते हैं
        }

        return $zone_permissions;
    }

    public function get_all_Maping_table_admin_zone()
    {
        // चरण 1: ज़ोन परमिशन डेटा प्राप्त करें
        $this->db->select('z.zone_id');
        $this->db->from('zone_permissions z');
        $this->db->where('z.user_id', "12");
        $query = $this->db->get();

        //log_message('info', $this->db->last_query());
        $zone_permissions = $query->result_array();

        if (empty($zone_permissions)) {
            //log_message('error', 'कोई ज़ोन परमिशन डेटा नहीं मिला।');
            return [];
        }

        // चरण 2: ज़ोन IDs को एकत्र करें
        $zone_ids = [];
        foreach ($zone_permissions as $zone) {
            $zone_ids = array_merge($zone_ids, json_decode($zone['zone_id']));
        }

        // चरण 3: डिस्ट्रिब्यूटर्स से Customer_Code और Zone प्राप्त करें
        $this->db->select('Customer_Code, Zone');
        $this->db->from('distributors d');
        $this->db->where_in('d.Zone_Code', $zone_ids);
        $query = $this->db->get();

        //log_message('info', $this->db->last_query());
        $customer_codes = $query->result_array();

        if (empty($customer_codes)) {
            //log_message('error', 'कोई Customer_Code डेटा नहीं मिला।');
            return [];
        }

        // चरण 4: Customer_Code के आधार पर Mapping Table से DB_Code प्राप्त करें
        $customer_codes_list = array_column($customer_codes, 'Customer_Code');
        $this->db->select('m.*, d.Customer_Code, d.Zone');
        $this->db->from('maping m');
        $this->db->join('distributors d', 'm.DB_Code = d.Customer_Code', 'inner');
        $this->db->where_in('m.DB_Code', $customer_codes_list);
        $query = $this->db->get();

        //log_message('info', $this->db->last_query());
        $mapping_data = $query->result_array();

        if (empty($mapping_data)) {
            //log_message('error', 'कोई मैपिंग डेटा नहीं मिला।');
            return [];
        }

        // चरण 5: स्तरों के अनुसार डेटा को संरचित करें
        $tree = [];
        foreach ($mapping_data as $row) {
            $current_level = &$tree;

            for ($i = 1; $i <= 7; $i++) {
                $level_key = "Level_$i";
                $level_value = $row[$level_key];

                if (!empty($level_value)) {
                    if (!isset($current_level[$level_key][$level_value])) {
                        $current_level[$level_key][$level_value] = [
                            'name' => $this->get_employee_name($level_value),
                            'zone' => $row['Zone'], // Zone नाम जोड़ें
                            'Customer_Code' => $row['Customer_Code'],
                            'DB_Code' => $row['DB_Code'],
                            'children' => []
                        ];
                    }

                    $current_level = &$current_level[$level_key][$level_value]['children'];
                }
            }
        }

        return $tree;
    }



    public function get_all_Maping_data_zone()
    {
        $sql = "
           SELECT DISTINCT
mp.id,
    mp.DB_Code,
    mp.Level_1,
    emp1.name AS Level_1_Name,
    mp.Level_2,
    emp2.name AS Level_2_Name,
    mp.Level_3,
    emp3.name AS Level_3_Name,
    mp.Level_4,
    emp4.name AS Level_4_Name,
    mp.Level_5,
    emp5.name AS Level_5_Name,
    mp.Level_6,
    emp6.name AS Level_6_Name,
    mp.Level_7,
    emp7.name AS Level_7_Name,
    ds.Customer_Name,
    ds.Customer_Code,
    ds.Sales_Code,
    ds.Sales_Name,
    ds.Distribution_Channel_Code,
    ds.Distribution_Channel_Name,
    ds.Division_Code,
    ds.Division_Name,
    ds.Customer_Type_Code,
    ds.Customer_Group_Code,
       ds.Customer_Group_Name,
    ds.Customer_Type_Name,
    ds.Pin_Code,
    ds.City,
    ds.District,
    ds.Contact_Number,
    ds.Country,
    ds.Zone,
    ds.Zone_Code,
    ds.State,
    ds.State_Code,
    ds.Population_Strata_2


FROM 
    maping mp
LEFT JOIN employee emp1 ON mp.Level_1 = emp1.pjp_code
LEFT JOIN employee emp2 ON mp.Level_2 = emp2.pjp_code
LEFT JOIN employee emp3 ON mp.Level_3 = emp3.pjp_code
LEFT JOIN employee emp4 ON mp.Level_4 = emp4.pjp_code
LEFT JOIN employee emp5 ON mp.Level_5 = emp5.pjp_code
LEFT JOIN employee emp6 ON mp.Level_6 = emp6.pjp_code
LEFT JOIN employee emp7 ON mp.Level_7 = emp7.pjp_code
LEFT JOIN distributors ds ON mp.DB_Code = ds.Customer_Code
    AND IFNULL(mp.Sales_Code, '') = IFNULL(ds.Sales_Code, '')
    AND IFNULL(mp.Distribution_Channel_Code, '') = IFNULL(ds.Distribution_Channel_Code, '')
    AND IFNULL(mp.Division_Code, '') = IFNULL(ds.Division_Code, '')
    AND IFNULL(mp.Customer_Type_Code, '') = IFNULL(ds.Customer_Type_Code, '')
    AND IFNULL(mp.Customer_Group_Code, '') = IFNULL(ds.Customer_Group_Code, '')
GROUP BY 
    mp.DB_Code, 
    mp.Level_1, 
    mp.Level_2, 
    mp.Level_3, 
    mp.Level_4, 
    mp.Level_5, 
    mp.Level_6, 
    mp.Level_7,
    ds.Customer_Name,
    ds.Customer_Code,
    ds.Sales_Code,
    ds.Sales_Name,
    ds.Distribution_Channel_Code,
    ds.Distribution_Channel_Name,
    ds.Division_Code,
    ds.Division_Name,
    ds.Customer_Type_Code,
    ds.Customer_Group_Code,
    ds.Customer_Group_Name,
    ds.Customer_Type_Name,
    ds.Pin_Code,
    ds.City,
    ds.District,
    ds.Contact_Number,
    ds.Country,
    ds.Zone,
    ds.Zone_Code,
    ds.State_Code,
    ds.State,
    ds.Population_Strata_2;

        ";

        // Execute the query and return the result
        $query = $this->db->query($sql);
        return $query->result_array(); // Returns data as an array of results
    }




    public function check_existing_mapping($data)
    {
        $this->db->where('DB_Code', $data['DB_Code']);
        $this->db->where('Sales_Code', $data['Sales_Code']);
        $this->db->where('Distribution_Channel_Code', $data['Distribution_Channel_Code']);
        $this->db->where('Division_Code', $data['Division_Code']);
        $this->db->where('Customer_Type_Code', $data['Customer_Type_Code']);
        $this->db->where('Customer_Group_Code', $data['Customer_Group_Code']);

        $query = $this->db->get('maping');
        return $query->num_rows() > 0;
    }

    /**
     * Insert mapping data into the database
     */
    public function insert_mapping($data)
    {
        return $this->db->insert('maping', $data);
    }

    public function update_pjp_code($level, $pjp_code_old, $DB_Code, $set_pjp_code, $Replace_DB_Code = null, $Vacant = null)
    {
        $level_column = 'Level_' . $level;

        // Step 1: Check if $DB_Code is not empty before executing the query
        if (!empty($DB_Code)) {
            // Update `$pjp_code_old` to `$set_pjp_code` for the given `DB_Code`
            $this->db->where($level_column, $pjp_code_old);
            $this->db->where_in('DB_Code', $DB_Code);
            $this->db->update('maping', [$level_column => $set_pjp_code]);

            if ($this->db->affected_rows() > 0) {
                // Step 2: Check cities for the old and new PJP codes
                $old_city = $this->get_employee_city($pjp_code_old);
                $new_city = $this->get_employee_city($set_pjp_code);

                // If cities are different, proceed with the update for Replace_DB_Code
                if ($old_city !== $new_city && $Vacant !== null && !empty($Replace_DB_Code)) {
                    // Update `set_pjp_code` records in `Replace_DB_Code` to Vacant
                    $this->db->where($level_column, $set_pjp_code);
                    $this->db->where_in('DB_Code', $Replace_DB_Code);
                    $this->db->update('maping', [$level_column => $Vacant]);
                } else {
                    // Log that no update was made due to matching cities
                    //log_message('info', "Cities match for $pjp_code_old and $set_pjp_code; skipping update for Replace_DB_Code.");
                }

                return true;
            } else {
                //log_message('error', "Failed to update pjp_code from $pjp_code_old to $set_pjp_code at $level_column.");
                return false;
            }
        } else {
            //log_message('error', "DB_Code array is empty, skipping update.");
            return false; // Skip update if $DB_Code is empty
        }
    }

    // Function to get the city for a given PJP code
    private function get_employee_city($pjp_code)
    {
        $this->db->select('city'); // Assuming the column name for city is 'city'
        $this->db->from('employee'); // Assuming your employee table is named 'employee'
        $this->db->where('PJP_Code', $pjp_code); // Assuming the column name for PJP code is 'PJP_Code'
        $query = $this->db->get();

        if ($query->num_rows() > 0) {
            return $query->row()->city; // Return the city if found
        }

        return null; // Return null if no record is found
    }




    public function get_pjp_code_by_level($level, $pjp_code)
    {
        // Define the column name based on level
        $level_column = 'Level_' . $level;

        try {
            // Check if pjp_code exists at this level
            $this->db->where($level_column, $pjp_code);
            $query = $this->db->get('maping'); // Replace with your actual table name

            // Check if any records match
            if ($query->num_rows() > 0) {
                // Return the pjp_code(s) that match the level
                return $query->result_array(); // Return results as an array
            } else {
                //log_message('info', "No matching records for level: $level, pjp_code: $pjp_code.");
                return []; // Return an empty array if no records found
            }
        } catch (Exception $e) {
            // Log error message if there is an exception
            //log_message('error', "Failed to retrieve pjp_code for level: $level, pjp_code: $pjp_code. Error: " . $e->getMessage());
            return []; // Return empty array on error
        }
    }





    // public function insert_mapping($data)
    // {
    //     $this->db->insert('maping', $data);
    //     return $this->db->insert_id();
    // }
    public function Transfer_update_pjp_code($level, $pjp_code_old, $DB_Code, $set_pjp_code, $Replace_DB_Code, $Vacant = null)
    {
        $level_column = 'Level_' . $level;

        // Case A: Update level with set_pjp_code if both DB_Code and set_pjp_code are provided
        if (!empty($DB_Code) && !empty($set_pjp_code)) {
            $this->db->where($level_column, $pjp_code_old);
            $this->db->where_in('DB_Code', $DB_Code);
            $this->db->update('maping', [$level_column => $set_pjp_code]);
            //log_message($this->db->affected_rows() > 0 ? 'info' : 'error', "Updated `$level_column` to `$set_pjp_code` for DB_Code: " . json_encode($DB_Code));
        }

        // Case B: Update level with Vacant if Replace_DB_Code is provided and Vacant is not null
        if (!is_null($Vacant) && !empty($Replace_DB_Code)) {
            $this->db->where($level_column, $pjp_code_old);
            $this->db->where_in('DB_Code', $Replace_DB_Code);
            $this->db->update('maping', [$level_column => $Vacant]);
            //log_message($this->db->affected_rows() > 0 ? 'info' : 'error', "Updated `$level_column` to `$Vacant` for Replace_DB_Code: " . json_encode($Replace_DB_Code));
        }

        // Case D: Log when no update is needed
        if (is_null($Vacant)) {
            //log_message('info', "No update for `$level_column` since `Vacant` is null.");
        }

        return true;
    }




    public function Promoted_update_pjp_code($level_pass, $pjp_code_old, $DB_Code, $set_pjp_code, $Replace_DB_Code, $Vacant = null)
    {
        $level_column = 'Level_' . $level_pass;

        // Case A: Update level with set_pjp_code if both DB_Code and set_pjp_code are provided
        if (!empty($DB_Code) && !empty($set_pjp_code)) {
            $this->db->where($level_column, $pjp_code_old);
            $this->db->where_in('DB_Code', $DB_Code);
            $this->db->update('maping', [$level_column => $set_pjp_code]);
            //log_message($this->db->affected_rows() > 0 ? 'info' : 'error', "Updated `$level_column` to `$set_pjp_code` for DB_Code: " . json_encode($DB_Code));
        }

        // Case B: Update level with Vacant if Replace_DB_Code is provided and Vacant is not null
        if (!is_null($Vacant) && !empty($Replace_DB_Code)) {
            $this->db->where($level_column, $pjp_code_old);
            $this->db->where_in('DB_Code', $Replace_DB_Code);
            $this->db->update('maping', [$level_column => $Vacant]);
            //log_message($this->db->affected_rows() > 0 ? 'info' : 'error', "Updated `$level_column` to `$Vacant` for Replace_DB_Code: " . json_encode($Replace_DB_Code));
        }

        // Case D: Log when no update is needed
        if (is_null($Vacant)) {
            //log_message('info', "No update for `$level_column` since `Vacant` is null.");
        }

        return true;
    }
}
